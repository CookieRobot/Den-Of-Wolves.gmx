<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_depthobject</parentName>
  <maskName>spr_playerforward</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MaxHealth = 100;
Health = 100;

//
xSpd = 0;
ySpd = 0;

rSpd = 4;
mSpd = 3.5;
sSpd = 2;

noise_radius = 256;

enum p_dirs {
    forward,
    right,
    down,
    left
}

p_dir = p_dirs.forward;

sprite = spr_playerforward;

// States
enum p_states {
    normal = 0,
    cutscene = 1,
    attack = 2,
    dead = 3
}

p_state = p_states.normal;

hidden = false;

// Combat
delay = 0;
pos = -160;

locked_on = noone;

a_sub = 0;
a_delay = 0;


// Inventory
global.keyitems = ds_list_create();
global.consumables = ds_list_create();

ds_list_add(global.keyitems, ItemList(0, 0));
ds_list_add(global.consumables, ItemList(0, 0));

// Equipped Items
eq_key = 0;
key_pos = 0;

eq_weapon = 0;

eq_consumable = 0;
consum_pos = 0;

eq_passive = 0;

tm = 0;

// GUI 
a = 0;

arrow_YSub = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Enemy cursor y position changes here
if(arrow_YSub = 0) arrow_YSub = 4;
else arrow_YSub = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audibleSound(x, y, noise_radius);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get Keyboard Inputs
RightMove = global.Right_Pressed;
DownMove = global.Down_Pressed;
LeftMove = global.Left_Pressed;
UpMove = global.Up_Pressed;

Sneak = global.Aim_Press;
Run = global.Run_Press;

Activate = global.Context_Pressed;

Attack = global.Attack_Press;
Attack_RLS = global.Attack_Release;

UseConsumable = global.Item_Press;


Health = clamp(Health, 0, MaxHealth);

// Switch State If Player Is Dead
if(Health &lt;= 0){
    show_debug_message("You died");
    p_state = p_states.dead;
}

delay = clamp(delay, 0, 120);

switch(p_dir){
    case p_dirs.forward:
        sprite = spr_playerforward;
    break;
    
    case p_dirs.left:
        sprite = spr_playerleft;
    break;
    
    case p_dirs.right:
        sprite = spr_playerright;
    break;
    
    case p_dirs.down:
        sprite = spr_playerback;
    break;
}

switch(p_state){
    case 0:
        PlayerNormal();
    break;
    
    case 1:
        
    break;
    
    case 2:
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Call Stealth Kill Script
p_state = p_states.attack;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DrawHUD();  

if(p_state = p_states.attack){ 
    var attack = Attack_GUI(par_enemy);
    
    if(locked_on != noone){
        if(!locked_on.spotPlayer){
            if(attack = "success"){
                StealthKill(locked_on);
                locked_on = noone;
            } else if(attack = "failure"){
                locked_on.spotPlayer = true;
            }
        } else {    
            if(attack = "success"){
                with(locked_on){
                    Health-=10; // Change this to player's weapon
                }
            } else if(attack = "failure" || attack = "botched"){
                Health-= 25; // Change this to enemy weapon's damage
            }
        }
        
        if(attack != pointer_null){
            global.FadeR = false;
        }
    }
} else {
    if(pos != -160) pos = -160;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(xSpd != 0 || ySpd != 0) {
    if(Sneak) draw_sprite(sprite, AnimateSprite(1, 2, 15), x, y);
    else if(Run) draw_sprite(sprite, AnimateSprite(1, 2, 4), x, y);
    else draw_sprite(sprite, AnimateSprite(1, 2, 8), x, y);
} else draw_sprite(sprite, 0, x, y);
var sneak = global.Aim_Press;

var lo = locked_on;

if(p_state = p_states.normal){
    if(sneak){
        if(lo != noone){
            if(!lo.spotPlayer){
                var sub;
                
                // Delay controls subimage (if delay is maxed, the sprite will turn red)
                if(delay &lt; 120){
                    sub = 2;
                } else {
                    sub = 1;
                }
                
                // Draw cursor
                draw_sprite(spr_arrow, sub, locked_on.x, locked_on.y - (64 + arrow_YSub));
                
                // Check if player has a weapon equipped
                if(Attack){
                    if(eq_weapon &gt; 0){
                        if(alarm[2] = -1) alarm[2] = 16 - (delay / 10);
                    } else {
                        message[0] = "*I need a weapon...";
                        CreateDialogue(message);
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
