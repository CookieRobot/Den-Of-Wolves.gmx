<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//path_start(testroompath,5,path_action_continue,true);

followingPath = false;

nearestPath = noone;
alarm[0] = room_speed*5;

//path destination uses path point
pathDestination = noone;
destination[0] = noone;
destination[1] = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0;
alarm[0] = room_speed*3;
print("recalculating");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//go to nearest valid path

//GMS will override the array if you don't move it 
//to another array
array = findClosestPath(x,y);
for (i = 0; i&lt;4;i++;){nearestPath[i] = array[i];}
nearestPath[0] = array[0];
move_towards_point( nearestPath[0], nearestPath[1], 5 );

//select a destination point (Pick player)
player = instance_find(obj_player,0);
destination[0] = player.x;
destination[1] = player.y;
//array copying thing
array = findClosestPath(player.x,player.y);
for (i = 0; i&lt;4;i++;){pathDestination[i] = array[i];}
print("Start Moving to destination")
//alarm[0] = room_speed*5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//Object is not on a path but needs to get to one.
if (nearestPath!=noone)
{
    if(point_distance(x,y,nearestPath[0], nearestPath[1])&lt;5&amp;&amp;!followingPath)
    {
        //calculate which path direction is closer
        //nearestPath[2]
        //pathDestination[2]
        pathDirection = 1;
        if(path_get_closed(nearestPath[3]))
        {
            difference = abs(nearestPath[2]- pathDestination[2]);
            if(nearestPath[2]&gt;pathDestination[2])
            {
                if (difference&lt;.5){pathDirection = -1}
            }
            else
            {
                if (difference&gt;.5){pathDirection = -1}
            }
        }
        else
        {
        
        }
        path_start(nearestPath[3],5*pathDirection,path_action_continue,true);
        path_position = nearestPath[2];
        followingPath = true;
        print("Following path");
        nearestPath = noone;
        
    }
    exit;
}

//object is on a path and needs to go to a path point near its destination
if (pathDestination!=noone)
{
    if (point_distance(x,y,pathDestination[0], pathDestination[1])&lt;5&amp;&amp;followingPath)
    {
        x = pathDestination[0];
        y = pathDestination[1];
        followingPath = false;
        path_end();
        pathDestination = noone;
        move_towards_point(destination[0],destination[1],5)
        print("reached path dest");
    }
    exit;
}
//object is at the nearest path point and has a straight line to the target 
if(destination[0] != noone)
{
    if (point_distance(x,y,destination[0], destination[1])&lt;5)
    {
        speed = 0;
        alarm[0] = room_speed*10;
        print("Reached final dest");
        destination[0] = noone;
        destination[1] = noone;
    }
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text(x,y-48,"Path: " + string(path_position))

if (nearestPath != noone)
{
    draw_text(x,y-72,"Distance to path: " + 
    string(point_distance(x,y,nearestPath[0], nearestPath[1])))
    draw_rectangle_colour(nearestPath[0], nearestPath[1], 
    nearestPath[0]+8, nearestPath[1]+8, 
    c_blue, c_blue, c_blue, c_blue, false);


}

if (pathDestination!= noone)
{
    
    draw_rectangle_colour(pathDestination[0], pathDestination[1], 
    pathDestination[0]+8, pathDestination[1]+8, 
    c_green, c_green, c_green, c_green, false);

}

if (destination[0]!= noone)
{
    
    draw_rectangle_colour(destination[0], destination[1], 
    destination[0]+8, destination[1]+8, 
    c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
