<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_intro = true;

intro_message[0] = "/";
intro_message[1] = "On the horizon, I see my punishment.";
intro_message[2] = "\1BLOODDANCE\0 awaits my arrival.";

message[0] = "";

alpha = 0;

message_current = 0;
timer = 0;
cutoff = 0;

t = 0;
increment = 1;

// Menu Options
display_m_options = false;

enum m_screens {
    main = 0,
    settings = 1,
    credits = 2
}

m_screen = 0;

menu_item = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_m_options = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(display_m_options){
    if(m_screen = 0) NormalMenu_Input();
    else if (m_screen = 1) SettingsMenu_Input();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(m_screen){
    case 0:
        // If no save is detected
        var fE = global.bufferExists;
        
        if(!fE){
            if(menu_item = 0){
                NewGame();
            } else if (menu_item = 1){
                menu_item = 0;
                m_screen = 1;
            }
        } else {
            if(menu_item = 0){
                global.load = true;
            } else if (menu_item = 1){
                DeleteSave();
                global.bufferExists = file_exists("SData.Tien");
            }
        }
    break;
    
    case 1:
        if(window_get_fullscreen()){
            if(menu_item = 2){
                menu_item = 0;
                m_screen = 0;
            }
        } else {
            if(menu_item = 2){
                if(window_get_fullscreen() = true) window_set_fullscreen(false);
                else window_set_fullscreen(true);
                ScaleGame();
                display_set_gui_size(view_wport, view_hport);
            } else if(menu_item = 3){
                window_set_size(800, 600);
                ScaleGame();
            } else if(menu_item = 4){
                window_set_size(640, 480);
                ScaleGame();
            } else if(menu_item = 5){
                menu_item = 0;
                m_screen = 0;
            }
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>message_end = array_length_1d(intro_message);

if(display_intro){
    var mw = global.view_midw;
    var mh = global.view_midh;
    
    if(message_end &gt; 0){
        
        if(alpha &lt; 1){
            alpha += 0.25;
        } else {
            if (keyboard_check_pressed(ord("Z"))) {
                    if (message_current &lt; message_end - 1) {
                        message_current += 1;
                        cutoff = 0;
                    } else {
                        instance_destroy(); 
                    }
            }
        }
    }
    
    draw_set_color(c_white);
        
    draw_set_font(f_dialogue);
    if(message_end &gt; 0){
        var charWidth = 20;
        var lineEnd = 30;
        var line = 0;
        var space = 0;
        var i = 1;    
        var delay = 2;
        
        if(cutoff &lt; string_length(intro_message[message_current])){
            if(timer &gt;= delay){
                cutoff++;
                timer = 0;
            } else timer++;
        }
        
        while(i &lt;= string_length(intro_message[message_current]) &amp;&amp; i &lt;= cutoff){
            var length = 0;
            
            while(string_char_at(intro_message[message_current], i) != " " &amp;&amp; i &lt;= string_length(intro_message[message_current])){
                i++;
                length++;
            }
            
            if(space+length &gt; lineEnd){
                space = 0;
                line++;
            }        
            i -= length;
            
            if(string_char_at(intro_message[message_current], i) == "\"){
                modifier = real(string_char_at(intro_message[message_current], ++i));
                ++i;
                
                switch(modifier){
                    case 0:
                        draw_set_color(c_white);
                        draw_text(mw - 400, mh +(36*line), string_char_at(intro_message[message_current], i));             
                    break;
                                            
                    case 1:
                        draw_set_color(c_red);
                        draw_text(mw - 400, mh +(36*line), string_char_at(intro_message[message_current], i));
                    break;
                }
            } else {
                draw_text(mw - 400 + (space*charWidth), mh +(36*line), string_char_at(intro_message[message_current], i));
            }
            
            space++;
            i++;
            
            if(space = string_length(intro_message[message_current])){
                message_complete = true;
            } else {
                message_complete = false;
            }
            
            if(message_current = message_end - 1){
                alarm[0] = 30;
                display_intro = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mw = global.view_midw;
var mh = global.view_midh;

var fE = global.bufferExists;

// Draw Menu Options
if(display_m_options){
    draw_sprite_ext(spr_title, 0, mw - 330, mh - 280, 2, 2, 0, c_white, 1);
    // draw_sprite_ext(spr_menu, 1, view_midw - 128, view_midh, 3, 3, 0, c_white, 1);
    
    // if no save is detected, call normal menu options. 
    if(m_screen = 0){
        if(!fE) MenuOptions_Normal(menu_item);
        else MenuOptions_ExistingSave(menu_item);
    } else if (m_screen = 1) MenuOptions_Settings(menu_item);
}

if(!display_intro){
    display_m_options = true;
} else {
    display_m_options = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
