<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>paths[0] = 0;
//[path Array Postition,0x.1y.2pathPosition.3pathObjectPointer]
path_points[0,0] = 0;


//[path Array postition, path Array Position of other path]
meet_paths[0,0]=0;
//[path Array postition,point array position]
meet_points[0,0]=0;
meet_points_other[0,0]=0;
player = instance_find(obj_player,0);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a = 0

for (i = 0; i&lt;array_length_1d(paths);i++)
    {
        
        //do the first one manually so you can compare distances between points
        //x,y,pathpos,pathid
        path_points[a,0] = path_get_point_x(paths[i], 0);
        path_points[a,1] = path_get_point_y(paths[i], 0);
        path_points[a,2] = 0;
        path_points[a,3] = paths[i];
        path_points[a,4] = i;
        a++
        //travelled is used to calculate the path position 0-1 
        travelled = 0;
        fullDist = path_get_length(paths[i]);
        for (j = 1; j&lt;path_get_number(paths[i]);j++)
        {
            path_points[a,0] = path_get_point_x(paths[i], j);
            path_points[a,1] = path_get_point_y(paths[i], j);
            //calculate distance from previous point to current point
            dist = point_distance(path_points[a-1,0],path_points[a-1,1],
                path_points[a,0],path_points[a,1])
            travelled+=dist;
            path_points[a,2] = travelled/fullDist;
            path_points[a,3] = paths[i];
            path_points[a,4] = i;
            
            //print(path_points[a,2])
            a++;
        }
        
    }

skipPoint [0] = 0;
for (i = 0; i&lt;array_height_2d(path_points);i++)
{
    xCheck = path_points[i,0];
    yCheck = path_points[i,1];
    //count matches
    matchCount = 0;   
    //skip a point if it has already been checked
    skipPoint[array_length_1d(skipPoint)] = i;
        for (j = 1; j&lt;array_height_2d(path_points);j++)//compare to whole list
        {
            //check skip points
            validPoint = true;
            for(k = 0;k &lt;array_length_1d(skipPoint);k++)
            {
                if (skipPoint[k] == j )
                {
                validPoint = false 
                }
            }
            
            if (validPoint) // skip comparing own
            {
                //a is counter for the number of matches found on a spot
                
                xMatch = xCheck == path_points[j,0];
                yMatch = yCheck == path_points[j,1];
                if (xMatch&amp;&amp;yMatch)
                {
                    //find the array position of the path in paths[x]
                    pathArrayPosA = -1;
                    pathArrayPosB = -1;
                    for (l = 0; l&lt;array_length_1d(paths);l++)
                    {
                        if (paths[l]==path_points[i,3])
                        {
                            pathArrayPosA = l;
                            l = array_length_1d(paths);
                        }
                    }
                    for (l = 0; l&lt;array_length_1d(paths);l++)
                    {
                        if (paths[l]==path_points[j,3])
                        {
                            pathArrayPosB = l;
                            l = array_length_1d(paths);
                        }
                    }
                    
                    //print("j added: "+string(j))
                    
                    if (array_length_2d(meet_paths,pathArrayPosA)==0
                    ||(meet_paths[pathArrayPosA,0]==0))
                    {
                    meet_paths[pathArrayPosA,0]=pathArrayPosB;
                    meet_points[pathArrayPosA,0]= i;
                    meet_points_other[pathArrayPosA,0]= j;
                    
                    }
                    else
                    {
                        meet_paths[pathArrayPosA,
                        array_length_2d(meet_paths,pathArrayPosA)
                        ] = pathArrayPosB;
                        
                        meet_points[pathArrayPosA,
                        array_length_2d(meet_paths,pathArrayPosA)-1
                        ] = i;
                        
                        meet_points_other[pathArrayPosA,
                        array_length_2d(meet_paths,pathArrayPosA)-1
                        ] = j;
                    }
                    if (array_length_2d(meet_paths,pathArrayPosB)==0)
                    {
                    meet_paths[pathArrayPosB,0]=pathArrayPosA;
                    meet_points[pathArrayPosB,0]=j;
                    meet_points_other[pathArrayPosB,0]=i;
                    }
                    else
                    {
                        meet_paths[pathArrayPosB,
                        array_length_2d(meet_paths,pathArrayPosB)
                        ] = pathArrayPosA;
                        meet_points[pathArrayPosB,
                        array_length_2d(meet_paths,pathArrayPosB)-1
                        ] = j;
                        meet_points_other[pathArrayPosB,
                        array_length_2d(meet_paths,pathArrayPosB)-1
                        ] = i;
                        
                    }
                    
                    
                    
                    
                    
                     
                    
                    matchCount++
                    skipPoint[array_length_1d(skipPoint)] = j;
                    /*print("Connection Found "+ 
                    path_get_name(path_points[i,3])+
                    path_get_name(path_points[j,3])
                    )*/

                }
            }
        }
    
    
}
exit;
//print final count
for (i= 0; i&lt;array_height_2d(meet_paths)i++)
{
    s = path_get_name(paths[i])+" PathCount: " 
    for (j= 0; j&lt;array_length_2d(meet_paths,i)j++)
    {
        s= s
        +path_get_name(paths[meet_paths[i,j]])+" "
        +string(meet_points[i,j])+" ";
    }
    s = s +"Total: "+string(array_length_2d(meet_paths,i));
    print(s)

}

//print all point data
for (i= 0; i&lt;array_height_2d(path_points)i++)
    
        print(string(i)+" "+"X: "+string(path_points[i,0])
        +(" Y: "+string(path_points[i,1]))
        +(" Pos: "+string(path_points[i,2]))
        +(" PID: "+string(path_points[i,3]))
        +(" PAID: "+string(path_points[i,4])));
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!debug_mode)
{
exit;
}

//draw all paths
for (i = 0; i&lt;array_length_1d(paths);i++)
{
    
}
//draw meeting points


//test first point
validPoint = false; 

closestX = path_points[0,0];
closestY = path_points[0,1];
draw_rectangle(closestX-8,closestY-8,closestX+8,closestY+8,true);
dist = point_distance(player.x,player.y,closestX,closestY)
if (validateGotoPath(player.x,player.y,closestX,closestY,18))
    {
        draw_line_color(player.x,player.y,closestX,closestY,c_green,c_green)
        validPoint = true;
    }


for (i= 1; i&lt; array_height_2d(path_points);i++)
{
    //gather points
    xPos = path_points[i,0]
    yPos = path_points[i,1]
    //draw rectagle
    draw_rectangle(xPos-8,yPos-8,xPos+8,yPos+8,true);
    //find point closest to player
    testDist = point_distance(player.x,player.y,xPos,yPos)
    
    if (validateGotoPath(player.x,player.y,xPos,yPos,18))
    {
        draw_line_color(player.x,player.y,xPos,yPos,c_green,c_green)
        if (dist&gt;testDist)
        {
            closestX = xPos;
            closestY = yPos;
            dist = testDist
            validPoint = true;
        
        }
    }
}
if (validPoint)
{
draw_rectangle(closestX-8,closestY-8,closestX+8,closestY+8,false);

validateGotoPathDraw(player.x,player.y,closestX,closestY,18);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
