<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>paths[0] = 0;

path_points[0,0] = 0;

player = instance_find(obj_player,0);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a = 0

for (i = 0; i&lt;array_length_1d(paths);i++)
    {
        //do the first one manually so you can compare distances between points
        //x,y,pathpos,pathid
        path_points[a,0] = path_get_point_x(paths[i], 0);
        path_points[a,1] = path_get_point_y(paths[i], 0);
        path_points[a,2] = 0;
        path_points[a,3] = paths[i];
        a++
        //travelled is used to calculate the path position 0-1 
        travelled = 0;
        fullDist = path_get_length(paths[i]);
        for (j = 1; j&lt;path_get_number(paths[i]);j++)
        {
            path_points[a,0] = path_get_point_x(paths[i], j);
            path_points[a,1] = path_get_point_y(paths[i], j);
            //calculate distance from previous point to current point
            dist = point_distance(path_points[a-1,0],path_points[a-1,1],
                path_points[a,0],path_points[a,1])
            travelled+=dist;
            path_points[a,2] = travelled/fullDist;
            path_points[a,3] = paths[i];
            //print(path_points[a,2])
            a++;
        }
        
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!debug_mode)
{
exit;
}
//test first point
validPoint = false; 

closestX = path_points[0,0];
closestY = path_points[0,1];
draw_rectangle(closestX-8,closestY-8,closestX+8,closestY+8,true);
dist = point_distance(player.x,player.y,closestX,closestY)
if (validateGotoPath(player.x,player.y,closestX,closestY,18))
    {
        draw_line_color(player.x,player.y,closestX,closestY,c_green,c_green)
        validPoint = true;
    }


for (i= 1; i&lt; array_height_2d(path_points);i++)
{
    //gather points
    xPos = path_points[i,0]
    yPos = path_points[i,1]
    //draw rectagle
    draw_rectangle(xPos-8,yPos-8,xPos+8,yPos+8,true);
    //find point closest to player
    testDist = point_distance(player.x,player.y,xPos,yPos)
    
    if (validateGotoPath(player.x,player.y,xPos,yPos,18))
    {
        draw_line_color(player.x,player.y,xPos,yPos,c_green,c_green)
        if (dist&gt;testDist)
        {
            closestX = xPos;
            closestY = yPos;
            dist = testDist
            validPoint = true;
        
        }
    }
}
if (validPoint)
{
draw_rectangle(closestX-8,closestY-8,closestX+8,closestY+8,false);

validateGotoPathDraw(player.x,player.y,closestX,closestY,18);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
