<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.MonitorW = display_get_width();
global.MonitorH = display_get_height();
global.xOffset = 0;
global.yOffset = 0;

application_surface_draw_enable(false);
ScaleGame();

global.view_midw = surface_get_width(application_surface)/2;
global.view_midh = surface_get_height(application_surface)/2;

window_set_size(800, 600);

print(instance_number(obj_main))

if(instance_number(obj_main)&gt;1){
    print("Deleted main")
    instance_destroy(self);
    exit;
}
print("Created main")

//if(!instance_exists(obj_depthsorter)){
    //instance_create(x, y, obj_depthsorter);
//}

//create the controller Later we will want a way to load the user's default settings
controller = instance_create(0,0,obj_controller)
controller.persistent = true;

go_a = 0; 
bs_a = 0;

map = ds_grid_create(20, 20);
curArea = 000000;

global.data = ds_list_create();
global.load = false;

// TWEAK THIS- there seem to be problems with the save system.
if(file_exists("SData.Tien")) global.bufferExists = true;
else global.bufferExists = false;

global.Paused = false;

// Music
global.BGM = noone;

global.BGMVolume = 70;
global.SFXVolume = 100;

// Game Flags (TO BE PLANNED OUT)
flag[0] = false; // Entered first area of the city (Sets map in motion)
flag[1] = false; // First enemy fight (Creates enemies throughout the different rooms)
flag[2] = false; 
flag[3] = false;
flag[4] = false;
flag[5] = false;
flag[6] = false;
flag[7] = false;
flag[8] = false;
// MORE TO BE ADDED

global.roomDarkness = 0;

// Stats
global.TotalKills = 0;
global.TotalDeaths = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG ONLY

if(global.BGM != noone){
    if(!audio_is_playing(global.BGM)){
        audio_sound_gain(global.BGM, global.BGMVolume, 10);
        audio_play_sound(global.BGM, 1, true);
    }
}

Debug_KILLKEY = keyboard_check_pressed(ord("K"));
if(instance_exists(obj_player)){
    if(debug_mode){
        if(Debug_KILLKEY){
            with(obj_player){
                p_state = p_states.dead;
            }
        }
    }
} else {
    if(!global.bufferExists)
        if(instance_exists(inst_firstspawn))instance_create(inst_firstspawn.x, inst_firstspawn.y, obj_player);
}

if(global.load){
    if(ContinueGame() = "success"){
        global.load = false;
    }
}

if(instance_exists(obj_player) &amp;&amp; obj_player.p_state == p_states.normal 
    || global.Paused = true){
    canPause = true;
} else {
    canPause = false;
}

if(canPause){
    if(global.Pause_Pressed){ 
        global.Paused = !global.Paused;
    }
}

if(global.Paused){
    instance_deactivate_all(true);
    instance_activate_object(obj_controller);
} else {
    instance_activate_all();
}


global.BGMVolume = clamp(global.BGMVolume, 0, 100);
global.SFXVolume = clamp(global.SFXVolume, 0, 100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface_ext(application_surface, 0, 0, 1, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_player)){  
    // Draw Game-Over Screen If Player Is Dead
    if(obj_player.p_state = obj_player.p_states.dead){
        if(bs_a &lt; 1) bs_a+=0.05;
        else if(bs_a = 1) &amp;&amp; (go_a &lt; 1) go_a+=0.05;
        
        var view_midw = surface_get_width(application_surface)/2;
        var view_midh = surface_get_height(application_surface)/2;
        
        draw_set_alpha(bs_a);
        draw_set_color(c_black);
        
        draw_rectangle(view_xport, view_yport, surface_get_width(application_surface), surface_get_height(application_surface), false);
        draw_sprite_ext(spr_gameover, 1, view_midw, view_midh - 160, 3, 3, 0, c_white, go_a);
        
        draw_set_alpha(1);
        draw_set_color(c_white);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
