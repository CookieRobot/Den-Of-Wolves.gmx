<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>message[0] = "";

alpha = 0;

message_current = 0;
timer = 0;
cutoff = 0;

t = 0;
increment = 1;

message_complete = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_player.p_state = p_states.normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mw = global.view_midw;
var mh = global.view_midh;

message_end = array_length_1d(message);

if(message_end &gt; 0){
    obj_player.p_state = p_states.cutscene;
    
    if(alpha &lt; 1){
        alpha += 0.25;
    } else {
        if (keyboard_check_pressed(ord("Z"))) {
                if (message_current &lt; message_end - 1) {
                    message_current += 1;
                    cutoff = 0;
                } else {
                    instance_destroy(); 
                }
        }
    }
}

draw_sprite_ext(spr_dialoguebox, 0, mw, mh + 256, 2, 2, 0, c_white, alpha);

draw_set_color(c_white);
draw_roundrect(mw - 319, mh + 161, mw + 317, mh + 349, true);

if(message_complete)
    draw_sprite_ext(spr_cursor, 1, mw + 298, mh + 325, 1, 1, 0, c_white, 1);
    
draw_set_font(f_dialogue);
if(message_end &gt; 0){
    var charWidth = 20;
    var lineEnd = 30;
    var line = 0;
    var space = 0;
    var i = 1;    
    var delay = 1;
    
    if(cutoff &lt; string_length(message[message_current])){
        if(timer &gt;= delay){
            cutoff++;
            timer = 0;
        } else timer++;
    }
    
    while(i &lt;= string_length(message[message_current]) &amp;&amp; i &lt;= cutoff){
        var length = 0;
        
        while(string_char_at(message[message_current], i) != " " &amp;&amp; i &lt;= string_length(message[message_current])){
            i++;
            length++;
        }
        
        if(space+length &gt; lineEnd){
            space = 0;
            line++;
        }        
        i -= length;
        
        if(string_char_at(message[message_current], i) == "\"){
            modifier = real(string_char_at(message[message_current], ++i));
            ++i;
            
            switch(modifier){
                case 0:
                    draw_set_color(c_white);
                    draw_text(mw - 300, mh + 172+(36*line), string_char_at(message[message_current], i));             
                break;
                                        
                case 1:
                    draw_set_color(c_red);
                    draw_text(mw - 300, mh + 172+(36*line), string_char_at(message[message_current], i));
                break;
            }
        } else {
            draw_text(mw - 300 + (space*charWidth), mh + 172+(36*line), string_char_at(message[message_current], i));
        }
        
        space++;
        i++;
        
        if(space = string_length(message[message_current])){
            message_complete = true;
        } else {
            message_complete = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
